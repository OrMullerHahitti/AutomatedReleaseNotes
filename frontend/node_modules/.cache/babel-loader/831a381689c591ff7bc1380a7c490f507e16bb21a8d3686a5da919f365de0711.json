{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amit.wexler\\\\OneDrive - Accenture\\\\Documents\\\\Projects_new\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for sprint data, loading, error, selected sprints\n  const [sprints, setSprints] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedSprints, setSelectedSprints] = useState([]); // Track selected sprints for release notes\n\n  // Fetch sprints when \"List Sprints\" is clicked\n  const fetchSprints = async () => {\n    setLoading(true);\n    setError(null);\n    setSelectedSprints([]); // Reset selected sprints when fetching new data\n\n    const apiUrl = 'https://example.com/api/sprints'; // Replace with actual API URL\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setSprints(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle checkbox change to track selected sprints\n  const handleCheckboxChange = (event, sprintDate) => {\n    if (event.target.checked) {\n      setSelectedSprints(prev => [...prev, sprintDate]); // Add selected sprint date\n    } else {\n      setSelectedSprints(prev => prev.filter(date => date !== sprintDate)); // Remove unselected sprint date\n    }\n  };\n\n  // Make release notes API call with selected sprint dates\n  const makeReleaseNotes = async () => {\n    if (selectedSprints.length === 0) {\n      alert('Please select at least one sprint.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    const apiUrl = 'https://example.com/api/release-notes'; // Replace with actual API URL\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sprintDates: selectedSprints\n        }) // Pass the selected sprint dates\n      });\n      if (!response.ok) {\n        throw new Error('Error generating release notes');\n      }\n      const blob = await response.blob(); // Get the Word file from the response\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'release_notes.docx'; // Set the file name for download\n      link.click(); // Trigger the download\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sprints List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchSprints,\n        disabled: loading,\n        children: loading ? 'Loading...' : 'List Sprints'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this), sprints.length > 0 && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Sprints for Release Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: sprints.map((sprint, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: sprint.startDate,\n                onChange: event => handleCheckboxChange(event, sprint.startDate)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: sprint.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this), \" - \", sprint.startDate, \" to \", sprint.endDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: makeReleaseNotes,\n          disabled: loading || selectedSprints.length === 0,\n          children: loading ? 'Processing...' : 'Make Release Notes'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OazuYdBVZaeH4N77ZvUndQXbp5w=\");\n_c = App;\nexport default App;\n\n/*\nreturn (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        Edit <code>src/App.js</code> and save to reload.\n      </p>\n      <a\n        className=\"App-link\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      </a>\n    </header>\n  </div>\n);\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","jsxDEV","_jsxDEV","App","_s","sprints","setSprints","loading","setLoading","error","setError","selectedSprints","setSelectedSprints","fetchSprints","apiUrl","response","fetch","ok","Error","data","json","message","handleCheckboxChange","event","sprintDate","target","checked","prev","filter","date","makeReleaseNotes","length","alert","method","headers","body","JSON","stringify","sprintDates","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","sprint","index","type","value","startDate","onChange","name","endDate","_c","$RefreshReg$"],"sources":["C:/Users/amit.wexler/OneDrive - Accenture/Documents/Projects_new/my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\n \nfunction App() {\n  // State for sprint data, loading, error, selected sprints\n  const [sprints, setSprints] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedSprints, setSelectedSprints] = useState([]); // Track selected sprints for release notes\n \n  // Fetch sprints when \"List Sprints\" is clicked\n  const fetchSprints = async () => {\n    setLoading(true);\n    setError(null);\n    setSelectedSprints([]); // Reset selected sprints when fetching new data\n \n    const apiUrl = 'https://example.com/api/sprints'; // Replace with actual API URL\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setSprints(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n \n  // Handle checkbox change to track selected sprints\n  const handleCheckboxChange = (event, sprintDate) => {\n    if (event.target.checked) {\n      setSelectedSprints((prev) => [...prev, sprintDate]); // Add selected sprint date\n    } else {\n      setSelectedSprints((prev) => prev.filter((date) => date !== sprintDate)); // Remove unselected sprint date\n    }\n  };\n \n  // Make release notes API call with selected sprint dates\n  const makeReleaseNotes = async () => {\n    if (selectedSprints.length === 0) {\n      alert('Please select at least one sprint.');\n      return;\n    }\n \n    setLoading(true);\n    setError(null);\n \n    const apiUrl = 'https://example.com/api/release-notes'; // Replace with actual API URL\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sprintDates: selectedSprints }), // Pass the selected sprint dates\n      });\n      if (!response.ok) {\n        throw new Error('Error generating release notes');\n      }\n      const blob = await response.blob(); // Get the Word file from the response\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'release_notes.docx'; // Set the file name for download\n      link.click(); // Trigger the download\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sprints List</h1>\n \n        <button onClick={fetchSprints} disabled={loading}>\n          {loading ? 'Loading...' : 'List Sprints'}\n        </button>\n \n        {error && <p>Error: {error}</p>}\n \n        {sprints.length > 0 && !loading && (\n          <div>\n            <h2>Select Sprints for Release Notes</h2>\n            <ul>\n              {sprints.map((sprint, index) => (\n                <li key={index}>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      value={sprint.startDate}\n                      onChange={(event) => handleCheckboxChange(event, sprint.startDate)}\n                    />\n                    <strong>{sprint.name}</strong> - {sprint.startDate} to {sprint.endDate}\n                  </label>\n                </li>\n              ))}\n            </ul>\n \n            <button onClick={makeReleaseNotes} disabled={loading || selectedSprints.length === 0}>\n              {loading ? 'Processing...' : 'Make Release Notes'}\n            </button>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n \nexport default App;\n \n \n  /*\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n  */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}